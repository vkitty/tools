/**
 * Created by mebx on 16/4/10.
 */

var fs =require('fs'),
    path = require('path'),
    less = require('less'),
    UglifyJS = require("uglify-js"),
    uglifycss = require('uglifycss');

function MyNode(config){

    //默认配置
    var defaultConfig = {
        srcdir:'./build/output/view',
        ext:'.html',
        compress:false,
        compressStrict:false
    };

    this.config = Object.assign({},defaultConfig,config);
    this.init();
}


/**
 * 初始化模块
 */
MyNode.prototype.init = function(){
    var self = this;
    var files = this.getHtmlFiles();
    files.forEach(function(file){
        self.replaceHtml(file);
    })
};

/**
 * 发布上线
 */
MyNode.prototype.product = function(){

};

/**
 * 发布测试
 */
MyNode.prototype.test = function(){
};

/**
 * 开发
 * @type {MyNode}
 */
MyNode.prototype.dev = function(){

}

/**
 * 获取所有html文件
 * @type {MyNode}
 */
MyNode.prototype.getHtmlFiles = function(){
    var glob = require('glob-all');
    var files = glob.sync([
        this.config.srcdir+'/**/*'+this.config.ext      //include all     files/
    ]);

    return files;
}

/**
 * 替换
 */
MyNode.prototype.replaceHtml = function(htmlfile){
    var content = fs.readFileSync(htmlfile,'utf-8');
    var includeFiles = this.getIncludeFiles(content);
    var self = this;

    var dirname = path.dirname(htmlfile)+'/';

    includeFiles.forEach(function(file){
        var tplFile = path.normalize(dirname+file),
            tplSource = fs.readFileSync(tplFile,'utf-8'),
            tplExt = path.extname(tplFile).replace('.','').toLowerCase();

        var hanedelCode = self['handel'+tplExt](tplSource);
        content = content.replace("{{include '"+file+"'}}",hanedelCode);
    })

    fs.writeFileSync(htmlfile,content,'utf-8');
}

/**
 * 正则表达式匹配less\js|css文件
 */
MyNode.prototype.getIncludeFiles = function(content){
    //{{include index.less}} {{inclue ./js/index.js}}
    var files = [];
    content.replace(/\{\{include\s+'([^\}]+)'}}/g,function(v,file){
        if(file && /(less|css|js)/.test(file)){
            files.push(file);
        }
        return ''
    });

    return files;
}


/**
 * 处理js
 */
MyNode.prototype.handeljs = function(source){
    if(source && this.config.compress){
        if(!this.config.compressStrict){
            try {
                var result = UglifyJS.minify(source, {fromString: true});
                if(result.code){
                    source = result.code;
                }
            }catch(e) { }
        }else{
            var result = UglifyJS.minify(source, {fromString: true});
            if(result.code){
                source = result.code;
            }
        }

    }

    return '<script>\n'+source+'\n</script>';
}

/**
 * 处理css
 */
MyNode.prototype.handelcss = function(source){
    if(source && this.config.compress){
        if(!this.config.compressStrict){
            try {
                source = uglifycss.processString(source,{ maxLineLen: 500, expandVars: true });
            }catch (e){}
        }else{
            source = uglifycss.processString(source,{ maxLineLen: 500, expandVars: true });
        }
    }

    return '<style type="text/css">\n'+source+'\n</style>';
}


/**
 * 处理less
 */
MyNode.prototype.handelless = function(source){
    var compress = this.config.compress;

    less.render(source,{compress: compress},
        function (e, output) {
            source = '<style type="text/css">\n'+output.css+"\n</style>";
        });

    return source;
}


module.exports=MyNode;